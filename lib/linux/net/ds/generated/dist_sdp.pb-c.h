/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: dist_sdp.proto */

#ifndef PROTOBUF_C_dist_5fsdp_2eproto__INCLUDED
#define PROTOBUF_C_dist_5fsdp_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _DcDiscoveryReq DcDiscoveryReq;
typedef struct _DcDiscoveryResp DcDiscoveryResp;
typedef struct _DcMasterControllerNotifications DcMasterControllerNotifications;
typedef struct _DcRequestCreateTopic DcRequestCreateTopic;
typedef struct _DcResponseCreateTopic DcResponseCreateTopic;
typedef struct _DcControllerMsgs DcControllerMsgs;


/* --- enums --- */

typedef enum _DcMasterControllerNotifications__Notification {
  /*
   * if pub available, sub can create a data connection
   */
  DC_MASTER_CONTROLLER_NOTIFICATIONS__NOTIFICATION__pub_availabile = 0,
  /*
   * if pub lost connection.. sub can do some actions if master controller notifies
   */
  DC_MASTER_CONTROLLER_NOTIFICATIONS__NOTIFICATION__pub_lost = 1,
  /*
   * if sub is available, pub can create a data connection
   */
  DC_MASTER_CONTROLLER_NOTIFICATIONS__NOTIFICATION__sub_available = 2,
  /*
   * if sub lost and is the only sub, then pub can stop sending any more data
   */
  DC_MASTER_CONTROLLER_NOTIFICATIONS__NOTIFICATION__sub_lost = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DC_MASTER_CONTROLLER_NOTIFICATIONS__NOTIFICATION)
} DcMasterControllerNotifications__Notification;
typedef enum _DcControllerMsgs__MessageInfo {
  DC_CONTROLLER_MSGS__MESSAGE_INFO__discovery_req = 0,
  DC_CONTROLLER_MSGS__MESSAGE_INFO__discovery_resp = 1,
  DC_CONTROLLER_MSGS__MESSAGE_INFO__notifications = 2,
  DC_CONTROLLER_MSGS__MESSAGE_INFO__create_topic_req = 3,
  DC_CONTROLLER_MSGS__MESSAGE_INFO__create_topic_resp = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DC_CONTROLLER_MSGS__MESSAGE_INFO)
} DcControllerMsgs__MessageInfo;

/* --- messages --- */

/*
 * from sub to the master controller
 */
struct  _DcDiscoveryReq
{
  ProtobufCMessage base;
  /*
   * discover this particular pub
   */
  char *topic_name;
};
#define DC_DISCOVERY_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dc_discovery_req__descriptor) \
    , NULL }


/*
 * from master controller to sub
 */
struct  _DcDiscoveryResp
{
  ProtobufCMessage base;
  /*
   * if pub avilable .. then directly register a data connection
   */
  protobuf_c_boolean is_topic_available;
  /*
   * topic same name returnde from master controller to the sub
   */
  char *topic_name;
  /*
   * ipaddr of the pub
   */
  char *ipaddr;
  /*
   * port of the pub
   */
  uint32_t port;
};
#define DC_DISCOVERY_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dc_discovery_resp__descriptor) \
    , 0, NULL, NULL, 0 }


/*
 * master controller notification to the pub and sub
 */
struct  _DcMasterControllerNotifications
{
  ProtobufCMessage base;
  DcMasterControllerNotifications__Notification notify;
  /*
   * which pub / sub available or lost exactly
   */
  char *topic_name;
  /*
   * ip addr of the pub / sub
   */
  char *ipaddr;
  /*
   * port of the pub / sub
   */
  uint32_t port;
};
#define DC_MASTER_CONTROLLER_NOTIFICATIONS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dc_master_controller_notifications__descriptor) \
    , 0, NULL, NULL, 0 }


/*
 * from pub to master controller
 */
struct  _DcRequestCreateTopic
{
  ProtobufCMessage base;
  /*
   * name of the topic it is interested to create
   */
  char *topic_name;
  /*
   * is the topic needed to be local or over net ?
   */
  protobuf_c_boolean is_local;
};
#define DC_REQUEST_CREATE_TOPIC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dc_request_create_topic__descriptor) \
    , NULL, 0 }


/*
 * from master controller to pub node
 */
struct  _DcResponseCreateTopic
{
  ProtobufCMessage base;
  /*
   * topic name to be created
   */
  char *topic_name;
  /*
   * from master controller this is the assigned ip addr
   */
  char *ipaddr;
  /*
   * from master controller this is the assigned port
   */
  uint32_t port;
  /*
   * set to 1 if the topic is available.. if not set to false so pub can register a new topic again
   */
  protobuf_c_boolean is_valid_topic;
};
#define DC_RESPONSE_CREATE_TOPIC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dc_response_create_topic__descriptor) \
    , NULL, NULL, 0, 0 }


struct  _DcControllerMsgs
{
  ProtobufCMessage base;
  DcControllerMsgs__MessageInfo mi;
  DcDiscoveryReq *dreq;
  DcDiscoveryResp *dresp;
  DcMasterControllerNotifications *ns;
  DcRequestCreateTopic *ctreq;
  DcResponseCreateTopic *ctresp;
};
#define DC_CONTROLLER_MSGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dc_controller_msgs__descriptor) \
    , 0, NULL, NULL, NULL, NULL, NULL }


/* DcDiscoveryReq methods */
void   dc_discovery_req__init
                     (DcDiscoveryReq         *message);
size_t dc_discovery_req__get_packed_size
                     (const DcDiscoveryReq   *message);
size_t dc_discovery_req__pack
                     (const DcDiscoveryReq   *message,
                      uint8_t             *out);
size_t dc_discovery_req__pack_to_buffer
                     (const DcDiscoveryReq   *message,
                      ProtobufCBuffer     *buffer);
DcDiscoveryReq *
       dc_discovery_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dc_discovery_req__free_unpacked
                     (DcDiscoveryReq *message,
                      ProtobufCAllocator *allocator);
/* DcDiscoveryResp methods */
void   dc_discovery_resp__init
                     (DcDiscoveryResp         *message);
size_t dc_discovery_resp__get_packed_size
                     (const DcDiscoveryResp   *message);
size_t dc_discovery_resp__pack
                     (const DcDiscoveryResp   *message,
                      uint8_t             *out);
size_t dc_discovery_resp__pack_to_buffer
                     (const DcDiscoveryResp   *message,
                      ProtobufCBuffer     *buffer);
DcDiscoveryResp *
       dc_discovery_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dc_discovery_resp__free_unpacked
                     (DcDiscoveryResp *message,
                      ProtobufCAllocator *allocator);
/* DcMasterControllerNotifications methods */
void   dc_master_controller_notifications__init
                     (DcMasterControllerNotifications         *message);
size_t dc_master_controller_notifications__get_packed_size
                     (const DcMasterControllerNotifications   *message);
size_t dc_master_controller_notifications__pack
                     (const DcMasterControllerNotifications   *message,
                      uint8_t             *out);
size_t dc_master_controller_notifications__pack_to_buffer
                     (const DcMasterControllerNotifications   *message,
                      ProtobufCBuffer     *buffer);
DcMasterControllerNotifications *
       dc_master_controller_notifications__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dc_master_controller_notifications__free_unpacked
                     (DcMasterControllerNotifications *message,
                      ProtobufCAllocator *allocator);
/* DcRequestCreateTopic methods */
void   dc_request_create_topic__init
                     (DcRequestCreateTopic         *message);
size_t dc_request_create_topic__get_packed_size
                     (const DcRequestCreateTopic   *message);
size_t dc_request_create_topic__pack
                     (const DcRequestCreateTopic   *message,
                      uint8_t             *out);
size_t dc_request_create_topic__pack_to_buffer
                     (const DcRequestCreateTopic   *message,
                      ProtobufCBuffer     *buffer);
DcRequestCreateTopic *
       dc_request_create_topic__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dc_request_create_topic__free_unpacked
                     (DcRequestCreateTopic *message,
                      ProtobufCAllocator *allocator);
/* DcResponseCreateTopic methods */
void   dc_response_create_topic__init
                     (DcResponseCreateTopic         *message);
size_t dc_response_create_topic__get_packed_size
                     (const DcResponseCreateTopic   *message);
size_t dc_response_create_topic__pack
                     (const DcResponseCreateTopic   *message,
                      uint8_t             *out);
size_t dc_response_create_topic__pack_to_buffer
                     (const DcResponseCreateTopic   *message,
                      ProtobufCBuffer     *buffer);
DcResponseCreateTopic *
       dc_response_create_topic__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dc_response_create_topic__free_unpacked
                     (DcResponseCreateTopic *message,
                      ProtobufCAllocator *allocator);
/* DcControllerMsgs methods */
void   dc_controller_msgs__init
                     (DcControllerMsgs         *message);
size_t dc_controller_msgs__get_packed_size
                     (const DcControllerMsgs   *message);
size_t dc_controller_msgs__pack
                     (const DcControllerMsgs   *message,
                      uint8_t             *out);
size_t dc_controller_msgs__pack_to_buffer
                     (const DcControllerMsgs   *message,
                      ProtobufCBuffer     *buffer);
DcControllerMsgs *
       dc_controller_msgs__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dc_controller_msgs__free_unpacked
                     (DcControllerMsgs *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*DcDiscoveryReq_Closure)
                 (const DcDiscoveryReq *message,
                  void *closure_data);
typedef void (*DcDiscoveryResp_Closure)
                 (const DcDiscoveryResp *message,
                  void *closure_data);
typedef void (*DcMasterControllerNotifications_Closure)
                 (const DcMasterControllerNotifications *message,
                  void *closure_data);
typedef void (*DcRequestCreateTopic_Closure)
                 (const DcRequestCreateTopic *message,
                  void *closure_data);
typedef void (*DcResponseCreateTopic_Closure)
                 (const DcResponseCreateTopic *message,
                  void *closure_data);
typedef void (*DcControllerMsgs_Closure)
                 (const DcControllerMsgs *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor dc_discovery_req__descriptor;
extern const ProtobufCMessageDescriptor dc_discovery_resp__descriptor;
extern const ProtobufCMessageDescriptor dc_master_controller_notifications__descriptor;
extern const ProtobufCEnumDescriptor    dc_master_controller_notifications__notification__descriptor;
extern const ProtobufCMessageDescriptor dc_request_create_topic__descriptor;
extern const ProtobufCMessageDescriptor dc_response_create_topic__descriptor;
extern const ProtobufCMessageDescriptor dc_controller_msgs__descriptor;
extern const ProtobufCEnumDescriptor    dc_controller_msgs__message_info__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_dist_5fsdp_2eproto__INCLUDED */
